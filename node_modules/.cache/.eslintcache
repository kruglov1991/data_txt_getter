[{"/Users/max/Documents/kwork/data_txt_getter/src/index.js":"1","/Users/max/Documents/kwork/data_txt_getter/src/App.js":"2","/Users/max/Documents/kwork/data_txt_getter/src/reportWebVitals.js":"3","/Users/max/Documents/get-data-from-txt/Get-data-3-kot/data_txt_getter/src/index.js":"4","/Users/max/Documents/get-data-from-txt/Get-data-3-kot/data_txt_getter/src/reportWebVitals.js":"5","/Users/max/Documents/get-data-from-txt/Get-data-3-kot/data_txt_getter/src/App.js":"6"},{"size":535,"mtime":1694452053812,"results":"7","hashOfConfig":"8"},{"size":12001,"mtime":1694453684801,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1694452053812,"results":"10","hashOfConfig":"8"},{"size":535,"mtime":1703846448656,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1703846448657,"results":"13","hashOfConfig":"12"},{"size":13318,"mtime":1703852798523,"results":"14","hashOfConfig":"12"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pxwh4q",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"p3s05u",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/max/Documents/kwork/data_txt_getter/src/index.js",[],[],"/Users/max/Documents/kwork/data_txt_getter/src/App.js",["34","35","36","37","38"],[],"import React, { useEffect, useState } from 'react';\nimport uuid from 'react-uuid';\nimport axios from 'axios';\n\n\n// const dropboxToken = 'sl.BiU7yMIwdgY6DdiHU8lcRHpIvq5FFwdFitj4ivGFjT4NH9y7JRWWSAgu58eHwLsJf02Ljdq5Q0oTFnXTUojp6P4tytPhTXNiSkyqA19bhNveGazDU16Fs5kfIht6ujEP6ceeJP8'; // Замените на ваш токен доступа Dropbox\n// const dropboxToken = 'sl.BiWLfNuBKvpF70ytGjrP0rsGr1gZ_rrP7TfMfm70FaPsKxM1kzyx8kd5W9j-uK2yv5ZmhKhBZc6UTqKyDaSPBFLGj0FRpVgb2otd80XNTjzyOE6ZEbFOADoW7IZld_9h3cmMOZ0'\n\nfunction getNormalDate(dateS) {\n  const dateString = dateS.slice(0, -2);\n  const cur_date = dateString.split(' ')[4];\n  // const cur_date_hours = cur_date.split(':')[0];\n  const date = new Date(dateString);\n\n  const formattedDate = `${(date.getDate()).toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}.${date.getFullYear()}, ${cur_date}`;\n  return formattedDate;\n}\n\nconst FileData = ({ fileName, fileData }) => {\n  const [latestEntry, setLatestEntry] = useState('');\n\n  useEffect(() => {\n    // Получение последней строки из данных\n    const lines = fileData.split('\\n');\n    const lastLine = lines[lines.length - 2]; // Игнорируем последнюю пустую строку\n\n    setLatestEntry(lastLine);\n  }, [fileData]);\n\n  // Разбивка последней строки на отдельные значения\n  const entries = latestEntry.split('||').map(entry => entry.trim());\n\n  // Получение значений из последней строки\n  const [date, impressions, clicks, conversions, spend] = entries;\n\n  return (\n    <div className=\"bg-white rounded-md shadow-md p-4 mb-4 w-80\">\n      <div className=\"text-center mb-4\">\n        <h2 className=\"text-xl font-bold\">{fileName.split('.')[0]}</h2>\n      </div>\n      <div className=\"flex flex-col items-center\">\n        <div className=\"flex mb-2\">\n          <span className=\"font-semibold\">Дата и время:</span>\n          <span className=\"ml-2\">{getNormalDate(date)}</span>\n        </div>\n        <div className=\"flex mb-2\">\n          <span className=\"font-semibold\">Показы:</span>\n          <span className=\"ml-2\">{impressions && impressions.split(':')[1]}</span>\n        </div>\n        <div className=\"flex mb-2\">\n          <span className=\"font-semibold\">Клики:</span>\n          <span className=\"ml-2\">{clicks && clicks.split(':')[1]}</span>\n        </div>\n        <div className=\"flex mb-2\">\n          <span className=\"font-semibold\">Конверсии:</span>\n          <span className=\"ml-2\">{conversions && conversions.split(':')[1]}</span>\n        </div>\n        <div className=\"flex mb-2\">\n          <span className=\"font-semibold\">Расход:</span>\n          <span className=\"ml-2\">{spend && spend.split(':')[1]}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst AllStatisticTable = ({filesData}) => {\n  const [tableData, setTableData] = useState([]);\n  let tableDataArray = [];\n\n  useEffect(() => {\n    filesData.map(({ fileName, fileData }) => {\n      if (!fileName.includes('statistic_pb')) {\n        const lines = fileData.split('\\n');\n        const lastLine = lines[lines.length - 2]; // Игнорируем последнюю пустую строку\n        const entries = lastLine.split('||').map(entry => entry.trim());\n        const [date, impressions, clicks, conversions, spend] = entries;\n        const spendings = spend.split(':')[1];\n        const impr = impressions.split(':')[1];\n        if (tableDataArray.length === 0) {\n          tableDataArray = [+impr.replace(/\\s/g, \"\"), +clicks.split(':')[1], +conversions.split(':')[1], parseFloat(spendings.replace(',', '.'))];\n        } else {\n          tableDataArray[0] += +impr.replace(/\\s/g, \"\");\n          tableDataArray[1] += +clicks.split(':')[1];\n          tableDataArray[2] += +conversions.split(':')[1];\n          tableDataArray[3] += parseFloat(spendings.replace(',', '.'));\n        }\n      }\n    })\n    setTableData(tableDataArray);\n  }, [tableData]);\n\n  return (\n    <div className=\"bg-white rounded-md shadow-md p-4 mb-4\">\n      <h2 className=\"text-xl font-bold mb-4 text-center\">Общая статистика по сайтам</h2>\n      <div className=\"overflow-x-auto\">\n      <table className=\"w-full table-auto border-collapse\">\n        <thead>\n          <tr>\n            <th className=\"p-2 border\">Показы</th>\n            <th className=\"p-2 border\">Клики</th>\n            <th className=\"p-2 border\">Конверсии</th>\n            <th className=\"p-2 border\">Расход</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            {\n              tableData.map((el, index) => (\n                  <td key={uuid()} className=\"p-2 border\">{el}</td>\n              ))\n            }\n          </tr>\n        </tbody>\n      </table>\n      </div>\n    </div>\n  );\n\n  \n}\n\nconst FooterTable = ({ fileName, fileData }) => {\n  const [tableData, setTableData] = useState([]);\n\n  useEffect(() => {\n    // Разбивка данных на отдельные строки\n    const allTablesData = [[]]\n    fileData = fileData.replace(/\\s+\\|\\|/g, '||');\n    const lines = fileData.split('\\n');\n    const rows = lines.map(line => line.split('||').map(entry => entry.trim()));\n\n    rows.forEach((el, index) => {\n      const last = allTablesData.length - 1;\n      if (el[0] === '') {\n        allTablesData.push([]);\n      } else {\n        allTablesData[last].push(el);\n      }\n    })\n\n    allTablesData.splice(-2);\n    setTableData(allTablesData[allTablesData.length - 1]);\n\n  }, [fileData]);\n\n  return (\n    <div className=\"bg-white rounded-md shadow-md p-4 mb-4\">\n      <h2 className=\"text-xl font-bold mb-4\">{fileName.split('.')[0]}</h2>\n      <div className=\"overflow-x-auto\">\n      <table className=\"w-full table-auto border-collapse\">\n        <thead>\n          <tr>\n            <th className=\"p-2 border\">Дата и время</th>\n            <th className=\"p-2 border\">Уникальных</th>\n            <th className=\"p-2 border\">Глубина</th>\n            <th className=\"p-2 border\">Конверсий всего</th>\n            <th className=\"p-2 border\">Новых</th>\n            <th className=\"p-2 border\">В работе</th>\n            <th className=\"p-2 border\">Отказных</th>\n            <th className=\"p-2 border\">Треш</th>\n            <th className=\"p-2 border\">Сумма в работе</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            {\n              tableData.map((el, index) => (\n                (el && el[0] && el[0] !== '') ?\n                  <td key={uuid()} className=\"p-2 border\">{el[0].includes('(') ? getNormalDate(el[0]) : el[0]}</td>\n                  :\n                  ''\n              ))\n            }\n          </tr>\n        </tbody>\n      </table>\n      </div>\n    </div>\n  );\n};\n\nconst App = () => {\n  const [fileData, setFileData] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [dropboxToken, setDropboxToken] = useState(\"\"); // Состояние для токена Dropbox\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // Состояние для проверки входа пользователя\n\n\n  useEffect(() => {\n    const fetchFilesFromDropbox = async () => {\n      try {\n        const currentToken = localStorage.getItem('token');\n        if (!currentToken) {\n          return; // Прекратить выполнение, если токен отсутствует\n        } else {\n          setDropboxToken(currentToken);\n        }\n\n\n\n        // Запрос списка файлов из Dropbox с использованием токена\n        const response = await axios.post('https://api.dropboxapi.com/2/files/list_folder', {\n          path: '',\n        }, {\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${dropboxToken}`,\n          },\n        });\n\n        if (response.status === 200) {\n          const files = response.data.entries;\n          const promises = files.map(async (file) => {\n            const fileResponse = await axios.post('https://content.dropboxapi.com/2/files/download', null, {\n              headers: {\n                'Content-Type': 'application/octet-stream',\n                'Authorization': `Bearer ${dropboxToken}`,\n                'Dropbox-API-Arg': JSON.stringify({\n                  path: file.path_display,\n                }),\n              },\n            });\n\n            if (fileResponse.status === 200) {\n              const fileData = fileResponse.data;\n              return { fileName: file.name, fileData };\n            } else {\n              // console.error('Ошибка при загрузке файла из Dropbox:', file.name);\n              return null;\n            }\n          });\n\n          const fileData = await Promise.all(promises);\n          setFileData(fileData.filter((file) => file !== null));\n        } else {\n          // console.error('Ошибка при получении списка файлов из Dropbox:', response.status);\n          // setError(\"Обновите api токен для Dropbox\");\n        }\n      } catch (error) {\n        // console.error('Ошибка при выполнении запроса к Dropbox API:', error);\n      }\n    };\n\n    fetchFilesFromDropbox();\n  }, [dropboxToken]);\n\n  const handleLogin = () => {\n    // Перенаправление на страницу аутентификации Dropbox OAuth\n    window.location.href = 'https://www.dropbox.com/oauth2/authorize?client_id=r9b01m2xz3ooiv2&response_type=token&redirect_uri=https://data-from-txt-getter.vercel.app'; // Вот тут после redirect_uri= напишите ваш сайт куда вы залили этот проект ||| то есть вам надо заменить https://get-data-from-txt.vercel.app на свою ссылку\n  };\n\n  const handleOAuthCallback = () => {\n    const token = window.location.hash.split('=')[1]; // Получение токена из URL\n    const cleanToken = token.split('&')[0];\n    localStorage.setItem('token', cleanToken);\n    setDropboxToken(cleanToken); // Установка токена Dropbox\n    setIsLoggedIn(true); // Установка состояния входа пользователя\n\n    // Очистка URL от токена\n    window.history.replaceState({}, document.title, window.location.pathname);\n  };\n\n  useEffect(() => {\n    // Проверка, был ли выполнен вход при загрузке страницы\n    if (window.location.hash.includes('access_token')) {\n      handleOAuthCallback();\n    }\n  }, []);\n\n  return (\n    <div className=\"container mx-auto p-4\">\n      <h1 className=\"text-3xl font-bold text-center mb-8\">Статистика</h1>\n\n      {!isLoggedIn ? (\n        <div className=\"flex justify-center mb-4\">\n          <button className=\"px-4 py-2 bg-blue-500 text-white font-semibold rounded-md\" onClick={handleLogin}>\n            Войти в аккаунт Dropbox\n          </button>\n        </div>\n      ) : ''}\n\n      {error !== \"\" && (\n        <h1 className=\"text-3xl font-bold text-center mt-4 text-red-600\">{error}</h1>\n      )}\n      <div className=\"flex flex-wrap just justify-center gap-4\">\n        {fileData.map(({ fileName, fileData }) => (\n          <React.Fragment key={fileName}>\n            {!fileName.includes('statistic_pb') && (\n              <FileData fileName={fileName} fileData={fileData} />\n            )}\n          </React.Fragment>\n        ))}\n      </div>\n      <React.Fragment>\n          <AllStatisticTable filesData={fileData} />\n      </React.Fragment>\n      {fileData.map(({ fileName, fileData }) => (\n        <React.Fragment key={fileName}>\n          {fileName.includes('statistic_pb') && (\n            <FooterTable fileName={fileName} fileData={fileData} />\n          )}\n        </React.Fragment>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n","/Users/max/Documents/kwork/data_txt_getter/src/reportWebVitals.js",[],[],"/Users/max/Documents/get-data-from-txt/Get-data-3-kot/data_txt_getter/src/index.js",[],[],"/Users/max/Documents/get-data-from-txt/Get-data-3-kot/data_txt_getter/src/reportWebVitals.js",[],[],"/Users/max/Documents/get-data-from-txt/Get-data-3-kot/data_txt_getter/src/App.js",["39","40","41","42","43"],[],{"ruleId":"44","severity":1,"message":"45","line":72,"column":44,"nodeType":"46","messageId":"47","endLine":72,"endColumn":46},{"ruleId":"48","severity":1,"message":"49","line":77,"column":16,"nodeType":"50","messageId":"51","endLine":77,"endColumn":20},{"ruleId":"52","severity":1,"message":"53","line":81,"column":28,"nodeType":"54","endLine":81,"endColumn":146},{"ruleId":"52","severity":1,"message":"55","line":129,"column":16,"nodeType":"56","endLine":129,"endColumn":50},{"ruleId":"48","severity":1,"message":"57","line":185,"column":17,"nodeType":"50","messageId":"51","endLine":185,"endColumn":25},{"ruleId":"44","severity":1,"message":"45","line":73,"column":44,"nodeType":"46","messageId":"47","endLine":73,"endColumn":46},{"ruleId":"48","severity":1,"message":"49","line":78,"column":16,"nodeType":"50","messageId":"51","endLine":78,"endColumn":20},{"ruleId":"52","severity":1,"message":"53","line":82,"column":28,"nodeType":"54","endLine":82,"endColumn":218},{"ruleId":"52","severity":1,"message":"55","line":154,"column":16,"nodeType":"56","endLine":154,"endColumn":50},{"ruleId":"48","severity":1,"message":"57","line":210,"column":17,"nodeType":"50","messageId":"51","endLine":210,"endColumn":25},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'date' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Assignments to the 'tableDataArray' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","ArrayExpression","Assignments to the 'fileData' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'setError' is assigned a value but never used."]